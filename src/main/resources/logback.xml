<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="true" scanPeriod="1 seconds">

    <contextName>logback</contextName>
    <!-- 参数定义 -->
    <property name="app.name" value="ssmm"/>

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 定义过滤器 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 定义控制台输出格式 -->
        <encoder>
            <pattern>[%-5level][%d][%thread][%logger{36}][%file:%line] - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 定义日志输出的路径 -->
        <file>logs/${app.name}.log</file>
        <!-- 定义日志滚动的策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 定义文件滚动时的文件名的格式 -->
            <fileNamePattern>logs/${app.name}.%d{yyyy-MM-dd.HH}.log.gz</fileNamePattern>
            <!-- 60天的时间周期，日志量最大20GB -->
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--每个日志文件最大100MB-->
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>
        <!--定义文件输出格式-->
        <encoder>
            <pattern>[%-5level][%d][%thread][%logger{36}][%file:%line] - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="trace">
        <!-- 定义appender -->
        <appender-ref ref="stdout"/>
        <appender-ref ref="file"/>
    </root>

    <!--对于类路径以 com.example.logback 开头的Logger,输出级别设置为warn,并且只输出到控制台-->
    <!--这个logger没有指定appender，它会继承root节点中定义的那些appender-->
    <logger name="com.example.logback" level="warn"/>

    <!--通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger-->
    <!--由于这个logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender-->
    <!--如果没有设置 additivity="false" ,就会导致一条日志在控制台输出两次的情况-->
    <!--additivity表示要不要使用rootLogger配置的appender进行输出-->
    <logger name="mytest" level="info" additivity="false">
        <appender-ref ref="stdout"/>
    </logger>

    <!--由于设置了 additivity="false" ，所以输出时不会使用rootLogger的appender-->
    <!--但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方-->
    <logger name="mytest2" level="info" additivity="false"/>
</configuration>